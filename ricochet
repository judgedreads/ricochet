#!/usr/bin/env python3

# Ricochet: A different angle on music.
# Copyright (C) 2013-2014 Pearce Dedmon

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from gi.repository import Gst, Gtk, GObject, Notify
import os

from lib import browser
from lib import settings
from lib.control import Control
from lib.signals import Server


if settings.settings['backend'] == "gstreamer":
    from lib import gstream as backend
    Gst.init()
elif settings.settings['backend'] == "mpd":
    from lib import mpdbind as backend
else:
    print("Invalid backend: should be 'mpd' or 'gstreamer'")


def show_hide(widget, event):
    '''callback for tray to show/hide windows'''
    if event.button == 1:
        if control.get_visible():
            control.hide()
        else:
            control.show()
    elif event.button == 3:
        if brow.get_visible():
            brow.hide()
        else:
            brow.show()

# TODO: pass this shit through as args to __init__
player = backend.Player()
browser.player = player

music = settings.settings['music_dir']
browser.music = music

artists = os.listdir(music)

albums = []

for artist in artists:
    albumlist = os.listdir(music + artist)
    for i in range(0, len(albumlist)):
        albumlist[i] = artist + "/" + albumlist[i]
    albums.extend(albumlist)

albums.sort()

brow = browser.Browser(albums)

server = Server(player)
server.main()
control = Control(player, brow, server)
control.show_all()

brow.show_all()
brow.connect("delete-event", brow.quit)

if settings.settings['system_tray'] == 'True':
    tray = Gtk.StatusIcon.new_from_file("images/ricochet.png")
    tray.connect("button-press-event", show_hide)

Notify.init('ricochet')

Gtk.main()
