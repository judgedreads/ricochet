#!/usr/bin/env python3

# Ricochet: An album-oriented MPD client.
# Copyright (C) 2013-2014 Pearce Dedmon

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Notify', '0.7')

from gi.repository import (Gtk, Notify, Gio, GLib)
import os
import sys
import argparse
import json

from ricochet.browser import Browser
from ricochet import utils
from ricochet.control import Control
from ricochet import mpdapi

# TODO: use logging


class Ricochet(Gtk.Application):

    def __init__(self, player):
        Gtk.Application.__init__(self,
                                 application_id="apps.judgedreads.ricochet",
                                 flags=Gio.ApplicationFlags.FLAGS_NONE)
        GLib.set_application_name('Ricochet')
        GLib.set_prgname('Ricochet')
        self.connect("activate", self.on_activate)
        self.player = player

    def on_key_press(self, widget, event):
        if event.hardware_keycode == 65:
            self.player.toggle()

    def on_activate(self, app):
        window = Gtk.ApplicationWindow()
        window.set_role("Cover Browser")
        window.set_border_width(0)
        window.set_icon_name("ricochet")
        # window.set_default_size(1000, 700)

        Notify.init('Ricochet')

        control = Control(self.player)

        cache_dir = utils.SETTINGS['cache']
        with open(os.path.join(cache_dir, 'lib.json')) as f:
            j = json.load(f)
        albums = list(j.values())
        albums.sort(key=lambda x: x['disc'])
        albums.sort(key=lambda x: x['date'])
        albums.sort(key=lambda x: x['title'])
        albums.sort(key=lambda x: x['artist'])
        brow = Browser(albums, control, app)

        hbox = Gtk.Box()
        hbox.pack_start(control, False, False, 0)
        hbox.pack_start(brow, True, True, 0)
        brow.flowbox.get_child_at_index(0).grab_focus()

        window.add(hbox)
        window.connect("key-press-event", self.on_key_press)
        app.add_window(window)
        window.show_all()

if __name__ == "__main__":
    utils.update_settings()
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--version', action='store_true',
                        help='print version to stdout')
    parser.add_argument('-u', '--update-cache', action='store_true',
                        help='update album art cache for the grid')
    args = parser.parse_args()
    if args.version:
        print(utils.get_version())
        sys.exit()
    player = mpdapi.Player()
    need_update = args.update_cache or utils.need_update()
    if need_update:
        utils.progress(utils.update_cache, player)
    app = Ricochet(player)
    app.run(None)
